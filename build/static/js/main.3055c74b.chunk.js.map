{"version":3,"sources":["App.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountry","setSearchCountry","useEffect","axios","all","get","then","responseArr","console","log","data","catch","err","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","toLowerCase","includes","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","height","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","color","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","ReactDOM","render","StrictMode","document","getElementById","navigator","window","addEventListener","serviceWorker","register","registration","scope"],"mappings":"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","file":"static/js/main.3055c74b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nimport './App.css';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n// import CardColumns from 'react-bootstrap/CardColumns';\nimport Columns from 'react-columns';\nimport Form from 'react-bootstrap/Form';\n\nfunction App() {\n\nconst [latest, setLatest] = useState([]);\nconst [results, setResults] = useState([]);\nconst[searchCountry, setSearchCountry] = useState(\"\");\n\nuseEffect(() => {\n  axios\n  .all([\n    axios.get(\"https://corona.lmao.ninja/v2/all\"),\n    axios.get(\"https://corona.lmao.ninja/v2/countries\")\n  ])\n  \n  .then(responseArr => {\n    console.log(responseArr[0].data);\n    console.log(responseArr[1].data);\n    setLatest(responseArr[0].data);\n    setResults(responseArr[1].data);\n  })\n  .catch(err => {\n    console.log(err);\n  });\n}, []);\n\nconst date = new Date(parseInt(latest.updated));\nconst lastUpdated = date.toString();\n\nconst filterCountry = results.filter(item => {\n  return searchCountry !== \"\" ? item.country.toLowerCase().includes(searchCountry) : item;\n})\n\n\nconst countries = filterCountry.map((data ,i)=> {\n  return(\n    <Card\n    key={i} \n    bg = \"light\"\n    text= \"dark\"\n    className = \"text-center\"\n    style = {{margin : \"10px\"}}\n    >\n<Card.Img variant=\"top\" src={data.countryInfo.flag} style = {{height:\"200px\"}} ></Card.Img>\n<Card.Body>\n  <Card.Title>{data.country}</Card.Title>\n  <Card.Text>Cases {data.cases}</Card.Text>\n  <Card.Text>Deaths {data.deaths}</Card.Text>\n  <Card.Text>Recovered {data.recovered}</Card.Text>\n  <Card.Text>Today's cases {data.todayCases}</Card.Text>\n  <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n  <Card.Text>Active {data.active}</Card.Text>\n  <Card.Text>Critical {data.critical}</Card.Text>\n</Card.Body>\n    </Card>\n  )\n})\n\n\nvar queries = [{\n  columns: 2,\n  query: 'min-width: 500px'\n}, {\n  columns: 3,\n  query: 'min-width: 1000px'\n}];\n\n  return (\n    <div>\n      <br />\n      <h2 style={{textAlign: \"center\", color: \"white\" }}>Covid-19 Live Status </h2>\n      <br/>\n     <CardDeck style = {{margin : \"10px\"}}>\n  <Card bg=\"secondary\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}>\n    {/* <Card.Img variant=\"top\" src=\"holder.js/100px160\" /> */}\n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>\n       {latest.cases}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n  <small>Last updated {lastUpdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card  bg=\"danger\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}>\n    {/* <Card.Img variant=\"top\" src=\"holder.js/100px160\" /> */}\n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n      {latest.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n  <Card  bg=\"success\" text=\"white\" className=\"text-center\" style={{margin: \"10px\"}}>\n    {/* <Card.Img variant=\"top\" src=\"holder.js/100px160\" /> */}\n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n      {latest.recovered}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated 3 mins ago</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<br/>\n<Form style = {{margin : \"10px\"}}>\n  <Form.Group controlId=\"formGroupSearch\">\n    <Form.Control type=\"email\" placeholder=\"Search Country\" onChange={e => setSearchCountry(e.target.value)}/>\n  </Form.Group>\n \n</Form>\n\n<Columns queries={queries}>{countries}</Columns>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker.register('worker.js').then(function(registration) {\n      console.log('Worker registered successful', registration.scope);\n    }, function(err) {\n      console.log('Worker registration failed', err);\n    }).catch(function(err) {\n      console.log(err);\n    });\n  });\n} else {\n  console.log('Service Worker is not supported by browser.');\n}\n"],"sourceRoot":""}